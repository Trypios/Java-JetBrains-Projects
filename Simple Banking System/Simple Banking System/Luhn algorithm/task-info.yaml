type: edu
custom_name: stage2
files:
- name: src/banking/Main.java
  visible: true
  text: "package banking;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\
    import java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\n\
    import java.util.Scanner;\n\npublic class Main {\n\n    private static final Scanner\
    \ scanner = new Scanner(System.in);\n    private static final ArrayList<Customer>\
    \ customers = new ArrayList<>();\n    private static boolean running = true;\n\
    \    private static File outFile = new File(\"out.txt\");\n\n    private static\
    \ void mainMenu() {\n        print(\"1. Create an account\");\n        print(\"\
    2. Log into account\");\n        print(\"0. Exit\");\n\n        boolean inputReceived\
    \ = false;\n        while (!inputReceived) {\n            int input;\n       \
    \     try {\n                input = scanner.nextInt();\n                scanner.nextLine();\n\
    \            } catch (Exception e) {\n                print(\"Invalid input (main\
    \ menu)\");\n                continue;\n            }\n\n            switch (input)\
    \ {\n                case 1:\n                    Customer customer = new Customer();\n\
    \                    customers.add(customer);\n                    customer.newCreditCard();\n\
    \                    break;\n                case 2:\n                    customerMenu(logIn());\n\
    \                    break;\n                case 0:\n                    exit();\n\
    \                    break;\n                default:\n                    print(\"\
    Invalid input (main menu)\");\n                    continue;\n            }\n\
    \            inputReceived = true;\n        }\n    }\n\n    private static Customer\
    \ logIn() {\n\n        if (customers.isEmpty()) {\n            print(\"There are\
    \ currently no active accounts\");\n            return null;\n        }\n\n  \
    \      print(\"Enter your card number:\");\n        String inputAccountNo = scanner.nextLine();\n\
    \        print(\"Enter your PIN:\");\n        String inputPin = scanner.nextLine();\n\
    \n        for (Customer customer : customers) {\n            for (CreditCard card\
    \ : customer.getCreditCards()) {\n                // check if given credit card\
    \ exists with the correct pin:\n                if (card.getCardNumber().equals(inputAccountNo)\
    \ &&\n                                            card.getPin().equals(inputPin))\
    \ {\n                    print(\"You have successfully logged in!\");\n      \
    \              return customer;\n                }\n            }\n        }\n\
    \n        print(\"Wrong card number or PIN!\");\n        return null;\n    }\n\
    \n    private static void customerMenu(Customer customer) {\n        if (customer\
    \ == null) {\n            return;\n        }\n\n        while (true) {\n     \
    \       print(\"1. Balance\");\n            print(\"2. Log out\");\n         \
    \   print(\"0. Exit\");\n\n            boolean inputReceived = false;\n      \
    \      while (!inputReceived) {\n                int input;\n                try\
    \ {\n                    input = scanner.nextInt();\n                    scanner.nextLine();\n\
    \                } catch (Exception e) {\n                    print(\"Invalid\
    \ input (customer menu)\");\n                    continue;\n                }\n\
    \n                switch (input) {\n                    case 1:\n            \
    \            print(\"Balance: \" + customer.getBalance());\n                 \
    \       break;\n                    case 2:\n                        // implement\n\
    \                        print(\"You have successfully logged out!\");\n     \
    \                   return;\n                    case 0:\n                   \
    \     exit();\n                        return;\n                    default:\n\
    \                        print(\"Invalid input (customer menu)\");\n         \
    \               continue;\n                }\n                inputReceived =\
    \ true;\n            }\n        }\n    }\n\n    private static void exit() {\n\
    \        print(\"Bye!\");\n        running = false;\n    }\n\n    private static\
    \ void print(String text) {\n        System.out.println(text);\n        textToFile(text);\n\
    \    }\n\n    private static void textToFile(String text) {\n        try (PrintWriter\
    \ pw = new PrintWriter(outFile)) {\n            pw.println(text);\n        } catch\
    \ (FileNotFoundException e) {\n            print(\"File not found.\");\n     \
    \   }\n    }\n\n    public static void main(String[] args) {\n        \n     \
    \   while (running) {\n            mainMenu();\n        }\n    }\n}\n"
  learner_created: false
- name: src/banking/CreditCard.java
  visible: true
  text: |
    package banking;

    import java.util.Random;

    public class CreditCard {

        private static final Random rand = new Random();
        private static final String IIN = "400000";
        private final Customer owner;
        private final String cardNumber;
        private String pin;

        public CreditCard(Customer customer) {
            this.owner = customer;
            this.cardNumber = IIN + this.owner.getAccountNo() + generateChecksum();
            this.pin = generatePin();
        }

        public String getCardNumber() {
            return cardNumber;
        }

        public String getPin() {
            return pin;
        }

        public void changePin(String newpin) {
            int pin2;
            try {
                pin2 = Integer.parseInt(newpin);
            } catch (Exception e) {
                System.out.println("Invalid pin");
                return;
            }
            if (pin2 >= 0 && pin2 <= 9999) {
                this.pin = newpin;
            } else {
                System.out.println("Invalid pin");
            }
        }

        private String generateChecksum() {
            /*
             * returns a random digit
             * as string
             * */

            return Integer.toString(rand.nextInt(10));
        }

        private String generatePin() {
            /*
             * returns a random 4-digit number
             * as string
             * */

            StringBuilder pin = new StringBuilder();
            for (int i = 0; i < 4; i++) {
                pin.append(rand.nextInt(10));
            }
            return pin.toString();
        }
    }
  learner_created: false
- name: src/banking/Customer.java
  visible: true
  text: |
    package banking;

    import java.util.ArrayList;
    import java.util.Random;

    public class Customer {

        private static final Random rand = new Random();
        private final String accountNo;
        private final ArrayList<CreditCard> creditCards;
        private int balance = 0;

        public Customer() {
            this.accountNo = generateAccountNo();
            creditCards = new ArrayList<>();
        }

        public String getAccountNo() {
            return accountNo;
        }

        public int getBalance() {
            return balance;
        }

        public ArrayList<CreditCard> getCreditCards() {
            return creditCards;
        }

        public void newCreditCard() {

            CreditCard newCard = new CreditCard(this);
            creditCards.add(newCard);

            System.out.println("Your card has been created");
            System.out.println("Your card number:");
            System.out.println(newCard.getCardNumber());
            System.out.println("Your card PIN:");
            System.out.println(newCard.getPin());
        }

        private String generateAccountNo() {
            /*
             * Returns a random 9-digit number
             * as string
             * */

            StringBuilder accountNo = new StringBuilder();
            for (int i = 0; i < 9; i++) {
                accountNo.append(rand.nextInt(10));
            }
            return accountNo.toString();
        }
    }
  learner_created: false
- name: out.txt
  visible: true
  text: |
    Bye!
  learner_created: false
- name: test/SimpleBankSystemTest.java
  visible: false
  text: |
    import banking.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.List;
    import java.util.Random;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;


    public class SimpleBankSystemTest extends StageTest {


        public SimpleBankSystemTest() {
            super(Main.class);
        }

        private static String correctCardNumber = "";
        private static String correctPin = "";
        private static String incorrectCardNumber = "";
        private static String incorrectPin = "";
        private static boolean isCompleted = false;

        @Override
        public List<TestCase> generate() {
            return List.of(
                //Check card credentials
                new TestCase()
                    .setInput("1")
                    .addInput(output -> {

                        String out = output.toString().trim().toLowerCase();

                        Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
                        Matcher cardNumberMatcher = cardNumberPattern.matcher(out);

                        if (!cardNumberMatcher.find()) {
                            return new CheckResult(false, "You are printing the card number " +
                                "incorrectly. The card number should look like in the example: " +
                                "400000DDDDDDDDDD, where D is a digit.");
                        }

                        Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);
                        Matcher pinMatcher = pinPattern.matcher(out);

                        if (!pinMatcher.find()) {
                            return new CheckResult(false, "You are printing the card PIN " +
                                "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                                "a digit.");
                        }
                        correctPin = pinMatcher.group().trim();
                        correctCardNumber = cardNumberMatcher.group();

                        return "1";
                    })
                    .addInput(output -> {

                        String out = output.toString().trim().toLowerCase();

                        Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
                        Matcher cardNumberMatcher = cardNumberPattern.matcher(out);

                        if (!cardNumberMatcher.find()) {
                            return new CheckResult(false, "You are printing the card number " +
                                "incorrectly. The card number should look like in the example: " +
                                "400000DDDDDDDDDD, where D is a digit.");
                        }

                        Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);
                        Matcher pinMatcher = pinPattern.matcher(out);

                        if (!pinMatcher.find()) {
                            return new CheckResult(false, "You are printing the card PIN " +
                                "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                                "a digit.");
                        }

                        String anotherCardNumber = cardNumberMatcher.group();

                        if (anotherCardNumber.equals(correctCardNumber)) {
                            return new CheckResult(false, "Your program generates two identical card numbers!");
                        }

                        isCompleted = true;
                        return "0";
                    }),
                //Check log in and log out
                new TestCase()
                    .setInput("1")
                    .addInput(output -> {
                        String out = output.toString().trim().toLowerCase();

                        Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
                        Matcher cardNumberMatcher = cardNumberPattern.matcher(out);

                        if (!cardNumberMatcher.find()) {
                            return new CheckResult(false, "You are printing the card number " +
                                "incorrectly. The card number should look like in the example: " +
                                "400000DDDDDDDDDD, where D is a digit.");
                        }

                        Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);
                        Matcher pinMatcher = pinPattern.matcher(out);

                        if (!pinMatcher.find()) {
                            return new CheckResult(false, "You are printing the card PIN " +
                                "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                                "a digit.");
                        }
                        correctPin = pinMatcher.group().trim();
                        correctCardNumber = cardNumberMatcher.group();

                        return "2";
                    })
                    .addInput(output -> correctCardNumber + "\n" + correctPin)
                    .addInput(output -> {

                        if (!output.toString().toLowerCase().contains("successfully")) {
                            return new CheckResult(false, "The user should be signed in after " +
                                "entering the correct card information.");
                        }

                        return "2";
                    })
                    .addInput(output -> {

                        if (!output.toString().toLowerCase().contains("create an account")) {
                            return new CheckResult(false, "The user should be logged out after choosing 'Log out' option");
                        }

                        isCompleted = true;
                        return "0";
                    }),
                //Check log in with wrong PIN
                new TestCase()
                    .setInput("1")
                    .addInput(output -> {
                        String out = output.toString().trim().toLowerCase();

                        Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
                        Matcher cardNumberMatcher = cardNumberPattern.matcher(out);

                        Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);
                        Matcher pinMatcher = pinPattern.matcher(out);

                        if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                            return new CheckResult(false, "You should output card number and PIN like in example!");
                        }

                        correctCardNumber = cardNumberMatcher.group();
                        correctPin = pinMatcher.group();

                        Random random = new Random();

                        incorrectPin = correctPin;

                        while (correctPin.equals(incorrectPin)) {
                            incorrectPin = String.valueOf(1000 + random.nextInt(8999));
                        }

                        return "2";
                    })
                    .addInput(output -> correctCardNumber + "\n" + incorrectPin)
                    .addInput(output -> {

                        if (output.toString().toLowerCase().contains("successfully")) {
                            return new CheckResult(false, "The user should not be signed in after" +
                                " entering incorrect card information.");
                        }

                        isCompleted = true;
                        return "0";
                    }),
                //Check log in to not existing account
                new TestCase()
                    .setInput("1")
                    .addInput(output -> {
                        String out = output.toString().trim().toLowerCase();

                        Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
                        Matcher cardNumberMatcher = cardNumberPattern.matcher(out);

                        Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);
                        Matcher pinMatcher = pinPattern.matcher(out);

                        if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                            return new CheckResult(false, "You should output card number " +
                                "and PIN like in example");
                        }

                        correctPin = pinMatcher.group().trim();
                        correctCardNumber = cardNumberMatcher.group();

                        Random random = new Random();

                        incorrectCardNumber = correctCardNumber;

                        while (correctCardNumber.equals(incorrectCardNumber)) {
                            incorrectCardNumber = "400000" + (1_000_000_00 + random.nextInt(8_000_000_00));
                        }

                        return "2";
                    })
                    .addInput(output -> incorrectCardNumber + "\n" + correctPin)
                    .addInput(output -> {

                        if (output.toString().toLowerCase().contains("successfully")) {
                            return new CheckResult(false, "The user should not be signed" +
                                " in after entering the information of a non-existing card.");
                        }

                        isCompleted = true;
                        return "0";
                    }),

                // Check balance
                new TestCase()
                    .setInput("1")
                    .addInput(output -> {
                        String out = output.toString().trim().toLowerCase();

                        Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
                        Matcher cardNumberMatcher = cardNumberPattern.matcher(out);

                        Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);
                        Matcher pinMatcher = pinPattern.matcher(out);

                        if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                            return new CheckResult(false, "You should output card number and PIN like in example");
                        }

                        correctPin = pinMatcher.group().trim();
                        correctCardNumber = cardNumberMatcher.group();

                        return "2";
                    })
                    .addInput(output -> correctCardNumber + "\n" + correctPin)
                    .addInput(output -> "1")
                    .addInput(output -> {
                        if (!output.toString().contains("0")) {
                            return new CheckResult(false, "Expected balance: 0");
                        }

                        isCompleted = true;
                        return "0";
                    }),
                //Check Luhn algorithm
                new TestCase()
                    .setInput("1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n")
                    .addInput(output -> {
                        String out = output.toString().trim().toLowerCase();

                        Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
                        Matcher cardNumberMatcher = cardNumberPattern.matcher(out);

                        boolean isSomeCardFound = false;
                        int foundCards = 0;

                        while (cardNumberMatcher.find()) {

                            foundCards++;

                            if (!isSomeCardFound) {
                                isSomeCardFound = true;
                            }

                            String cardNumber = cardNumberMatcher.group();

                            if (!checkLuhnAlgorithm(cardNumber)) {
                                return new CheckResult(false, String.format("The card number %s doesn’t pass the Luhn algorithm.", cardNumber));
                            }
                        }

                        if (!isSomeCardFound) {
                            return new CheckResult(false, "You should output card number and PIN like in example");
                        }

                        if (foundCards != 20) {
                            return new CheckResult(false, "Tried to generate 20 cards, but found " + foundCards);
                        }

                        isCompleted = true;
                        return "0";
                    })
            );
        }

        @Override
        public CheckResult check(String reply, Object attach) {
            if (!isCompleted)
                return new CheckResult(false, "Looks like your program unexpectedly terminated without choosing 'exit' item");
            else
                isCompleted = false;
            return CheckResult.correct();
        }

        private boolean checkLuhnAlgorithm(String cardNumber) {
            int result = 0;
            for (int i = 0; i < cardNumber.length(); i++) {
                int digit = Character.getNumericValue(cardNumber.charAt(i));
                if (i % 2 == 0) {
                    int doubleDigit = digit * 2 > 9 ? digit * 2 - 9 : digit * 2;
                    result += doubleDigit;
                    continue;
                }
                result += digit;
            }
            return result % 10 == 0;
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/93/stages/516/implement
status: Solved
record: 1
